/**
 * Jenkins Pipeline installing a new Teamcenter single box environment, then updating it to a new release level (Patch or Major Upgrade)
 * Note: This pipeline has 2 phases. 
 * 	Phase 1: will perform the install
 *  Phase 2: jenkins can be configured to perform one of the following actions
 * 		a) do nothing (choosing this option means that only the phase 1 install is performed.
 * 		b) Patch to the next release level within the same major release
 * 		b) Upgrade to the next major release level 
 * 
 * This pipline will perform the following tasks:
 *     1) Phase 1:
 *     		a) Execute dc_quick_deploy to create a new environment in the Deployment Center
 *     		b) Copy the deploy script generated by the dc_quick_deploy to the target machine (VM)
 *     		c) Execute the deploy script on the target machine to install the software
 *     		d) Deploy WAR files on target machine (VM)
 *     2) Phase 2: 
 * 			a) Execute dc_quick_deploy to update the new environment in the Deployment Center
 *     		b) Copy the deploy script generated by the dc_quick_deploy to the target machine (VM)
 *     		c) Execute the deploy script on the target machine to install the software
 *     		d) Deploy WAR files on target machine (VM)
 * 
**/


envVariables = [
	common : [
		dcusername : "dcadmin",
		dcpassword : "dcadmin"
	],
	
	windows : [		
		// the following variables are for using the Deployment Center and dc_quick_deploy
		DC_ENV_NAME_PREFIX : "TestInstallUpdate",
		DC_QUICK_DEPLOY_PATH : "D//DCQuickDeploy",
		DC_URL : "http://tc022:8080/deploymentcenter",
		DC_DEPLOY_SCRIPT_DIR_NAME : "deploy",
		
		// The following variables are common settings used to execute tasks on the target VMs
		TARGET_VM_DEPLOY_SCRIPTS_DIR : "C:\\deploy_scripts", // location for where i want the generated deploy scripts to be copied to on the target VM
		TARGET_VM_MAPPED_DRIVE_BACK_TO_DC_REPO : "\\\\tsclient\\D\\DC\\DC31_2\\repository\\deploy_scripts", // mapped drive on the target VM back to the location for where the dc generates deploy scripts
		SEVEN_ZIP_PATH : "C:\\Program Files\\7-Zip",
		TARGET_VM_SOFTWARE_LOCATION : "C:\\Software",
		TARGET_VM_AUTODEPLOY_PATH : "C:\\apps\\oracle\\Middleware\\user_projects\\domains\\tc\\autodeploy",
		TARGET_VM_WEB_TIER_SERVICE_NAME : "Weblogic_tc_AdminServer",
		TARGET_VM_SERVER_POOL_SERVICE_NAME : "Teamcenter Server Manager config1_PoolA"
		
	],
	linux : [
	]
]

/**
 * Defining variables to be used during execution.
*/
String dcEnvironmentName = null; 
String scripts_dir_name = null;   
String machine_script_dir_name = null;
String machine_script_zip_name = null; 
String machine_script_path = null; 
String unzip_target_path = null; 
String target_vm_pool_manager_path = null;
String target_vm_machine_name = null;
String target_vm_tc_path = null;
String phase1_dc_quick_deploy_conf_file_name = null;
String phase2_dc_quick_deploy_conf_file_name = null;
String active_workspace_war_file_path = null;
String web_tier_war_file_path = null;



pipeline {
    
	agent {
        node {
            label "master" 
            customWorkspace "C:\\Builds\\Jenkins"
		}
	} 
   
   parameters {
        choice(
			name: 'VM_Environment_Name', 
			choices: ['DEV10','DEV11','DEV12'], 
			description: 'VM Machine Labels.'
		)
		
		choice(
			name: 'Teamcenter_Install_Scenario', 
			choices: ['Install_Fnd114_AW41_G6_102', 'Install_Fnd122_AW42_G6_102'], 
			description: 'Phase 1: Chose the software versions for installing Teamcenter'
		)
		
		choice(
			name: 'Teamcenter_Update_Scenario', 
			choices: [None, 'Patch_Fnd123_AW43_G6_1318', 'Upgrade_Fnd122_AW42_G6_1318', 'Upgrade_Fnd123_AW43_G6_1318'], 
			description: 'Phase 2: Chose the software versions for updating Teamcenter'
		)
    }
   
   environment {
      vmEnvName = "${params.VM_Environment_Name}"
      phase1Scenario = "${params.Teamcenter_Install_Scenario}"
      phase2Scenario = "${params.Teamcenter_Update_Scenario}"
   }
	
    stages {
        
        stage('PREPARE JENKINS VARIABLES' ) {
			steps {
                //Inject Environment variables
				loadPropertiesAndSetAsEnvVariable("windows")
								
				script {
					// DC variables
					dcEnvironmentName = "${DC_ENV_NAME_PREFIX}_${BUILD_NUMBER}_${vmEnvName}"
					
					
					
					// Phase1: convert the Jenkins Parameter selection to a DC Quick Deploy Configuration File Name
					if ( phase1Scenario.equals("Install_Fnd114_AW41_G6_102") ) {
						phase1_dc_quick_deploy_conf_file_name = "${phase1Scenario}.xml"
						target_vm_tc_path = "C:\\Program Files\\Siemens\\Teamcenter11\\teamcenter_root";
					}
					else if ( phase1Scenario.equals("Install_Fnd122_AW42_G6_102") ) {
						phase1_dc_quick_deploy_conf_file_name = "${phase1Scenario}.xml"
						target_vm_tc_path = "C:\\Program Files\\Siemens\\Teamcenter12\\teamcenter_root";
					}
					
					
					
					// Phase2: convert the Jenkins Parameter selection to a DC Quick Deploy Configuration File Name
					if ( phase2Scenario.equals("Patch_Fnd123_AW43_G6_1318") ) {
						phase2_dc_quick_deploy_conf_file_name = "${phase2Scenario}.xml"
					}
					else if ( phase2Scenario.equals("Upgrade_Fnd122_AW42_G6_1318") ) {
						phase2_dc_quick_deploy_conf_file_name = "${phase2Scenario}.xml"
					}
					else if ( phase2Scenario.equals("Upgrade_Fnd123_AW43_G6_1318") ) {
						phase2_dc_quick_deploy_conf_file_name = "${phase2Scenario}.xml"
					}
					
					
					
					
					// VM specific variables
					target_vm_machine_name = "Test2"
					active_workspace_war_file_path = "${target_vm_tc_path}\\aws2\\stage\\out\\awc.war";
					web_tier_war_file_path = "${target_vm_tc_path}\\web\\Teamcenter1\\deployment\\tc.war";
					target_vm_pool_manager_path = "${target_vm_tc_path}\\pool_manager\\confs\\config1";
					machine_script_dir_name = "deploy_${target_vm_machine_name}"
					machine_script_zip_name = "${machine_script_dir_name}" + ".zip"
					
					
					// Deploy Scenario specific variables for Phase 1
					scripts_dir_name = "${DC_DEPLOY_SCRIPT_DIR_NAME}_${BUILD_NUMBER}_phase1"
					machine_script_path = "${TARGET_VM_MAPPED_DRIVE_BACK_TO_DC_REPO}\\${dcEnvironmentName}\\install\\${scripts_dir_name}\\${machine_script_zip_name}"
					unzip_target_path = "${TARGET_VM_DEPLOY_SCRIPTS_DIR}\\${scripts_dir_name}\\${machine_script_dir_name}"
				}
            }
		}
        
        
        stage(DECLARATION) {
            steps {
                bat label:"" , script:""" 
                        REM Installing New DC Environment:        ${dcEnvironmentName}
						REM on VM:                                ${vmEnvName}
						REM Phase 1 Scenario:                     ${phase1Scenario} 
						REM Phase 2 Scenario:                     ${phase2Scenario} 
                     """
            }
        }
		
		
        stage('PHASE 1 EXECUTE DC QUICK DEPLOY') {
            steps {
				execQuickDeploy( dcEnvironmentName, "scenarios\\" + phase1_dc_quick_deploy_conf_file_name, scripts_dir_name, target_vm_machine_name)
            }
        }
        
        
        stage('PHASE 1 DEPLOY SOFTWARE TO TARGET MACHINE' ) {
            agent {
                node {
                    label "${vmEnvName}"
                }
            }
            steps {
				copyDeployScript( TARGET_VM_DEPLOY_SCRIPTS_DIR, scripts_dir_name, machine_script_path, machine_script_zip_name, unzip_target_path)
				execDeployScript( TARGET_VM_DEPLOY_SCRIPTS_DIR, unzip_target_path )
				deployWARFiles( active_workspace_war_file_path, web_tier_war_file_path )
            }
        }
		
		
		stage('IMPORT DATABASE') {
            steps {
                bat label: "", script:""" 
                        REM If you want to test the patch or upgrade with a real database
						REM you can use this stage to implement steps to import your database
						REM into the environment that was created during phase 1. 
						REM You will want to import before phase 2 starts, so that the phase 2
						REM performs the patch or upgrade using your real data.
                     """
            }
        }
        
        
        stage('PHASE 2 EXECUTE DC QUICK DEPLOY' ) {
            steps {
			
				script {
					// Deploy Scenario specific variables for Phase 1
					scripts_dir_name = "${DC_DEPLOY_SCRIPT_DIR_NAME}_${BUILD_NUMBER}_phase2"
					machine_script_path = "${TARGET_VM_MAPPED_DRIVE_BACK_TO_DC_REPO}\\${dcEnvironmentName}\\install\\${scripts_dir_name}\\${machine_script_zip_name}"
					unzip_target_path = "${TARGET_VM_DEPLOY_SCRIPTS_DIR}\\${scripts_dir_name}\\${machine_script_dir_name}"
						
						
					if ( phase2Scenario.equals(None) ) {
						echo "Phase 2: None was selected. This environment will not be updated."
					}
					else {
						echo "Phase 2: ${phase2Scenario} was selected. This environment will be updated."
						execQuickDeploy( dcEnvironmentName, "scenarios\\" + phase2_dc_quick_deploy_conf_file_name, scripts_dir_name, target_vm_machine_name)
					}
				}
            }
        }
        
        
        stage('PHASE 2 DEPLOY SOFTWARE TO TARGET MACHINE' ) {
            agent {
                node {
                    label "${vmEnvName}"
                }
            }
			
            steps {
				script {
					if ( phase2Scenario.equals("None") ) {
						echo "Phase 2: None was selected. No scripts will be executed."
					}
					else {
						copyDeployScript( TARGET_VM_DEPLOY_SCRIPTS_DIR, scripts_dir_name, machine_script_path, machine_script_zip_name, unzip_target_path)
						execDeployScript( TARGET_VM_DEPLOY_SCRIPTS_DIR, unzip_target_path )
						startupServices()
					}
				}
            }
        }
		
		
		stage('SUMMARY') {
            steps {
                bat label:"" , script:""" 
                        REM Installed New DC Environment:         ${dcEnvironmentName}
						REM on VM:                                ${vmEnvName}
						REM Phase 1 Scenario:                     ${phase1Scenario} 
						REM Phase 2 Scenario:                     ${phase2Scenario} 
                     """
            }
        }
		
		
		
    }
}



void execQuickDeploy(String dcEnvName, String inputFilePath, String scriptsDirName, String targetVMMachineName) {	
	dir ("${DC_QUICK_DEPLOY_PATH}") {
		script {
			bat label:"" , script:""" 
				set JAVA_HOME=C:\\apps\\Java\\jre8x64
				dc_quick_deploy.bat -dcurl=${DC_URL} -environment=${dcEnvName} -inputFile=${inputFilePath} -dcusername=${dcusername} -dcpassword=${dcpassword} -scriptDirectoryName=${scriptsDirName} -machine=${targetVMMachineName}
			"""
		}
		
	}
}

void copyDeployScript(String directory, String scriptsDirectoryName, String machineScriptPath, String machineScriptZipName, String unzipTargetPath) {
	dir("${directory}") {
		bat label: "Copy deploy scripts to target VM and unzip", script:""" 
			REM scriptsDirectoryName:   ${scriptsDirectoryName}		
			REM machineScriptZipName:   ${machineScriptZipName}
			REM machineScriptPath:      ${machineScriptPath}
			REM unzipTargetPath:        ${unzipTargetPath}
			
			mkdir ${scriptsDirectoryName}
			xcopy /h/k/f/c/I/Y ${machineScriptPath} ${TARGET_VM_DEPLOY_SCRIPTS_DIR}\\${scriptsDirectoryName}
			"${SEVEN_ZIP_PATH}\\7z.exe" x ${scriptsDirectoryName}\\${machineScriptZipName} -y -o"${unzipTargetPath}
		 """
	}
}



void execDeployScript(String directory, String unzipTargetPath) {
	dir("${directory}") {
		script {
			bat label:"" , script:""" 
				${unzipTargetPath}\\deploy.bat -dcusername=${dcusername} -dcpassword=${dcpassword} -softwareLocation=${TARGET_VM_SOFTWARE_LOCATION}
			 """
		}
	}
}


void deployWARFiles( String awWARFilePath, String webTierWarFilePath) {
	bat label:"" , script:""" 
		xcopy /h/k/f/c/I/Y "${awWARFilePath} ${TARGET_VM_AUTODEPLOY_PATH}"   
		xcopy /h/k/f/c/I/Y "${webTierWarFilePath} ${TARGET_VM_AUTODEPLOY_PATH}"             
	 """
}



void startupServices() {
	bat label: "" , script:""" 
		echo "Starting the Server Pool Service: ${TARGET_VM_SERVER_POOL_SERVICE_NAME}"
		net start "${TARGET_VM_SERVER_POOL_SERVICE_NAME}"
		
		REM Wait for Server Pool to boot up
		sleep 30
		
		echo "Starting the Web Tier Service: ${TARGET_VM_WEB_TIER_SERVICE_NAME}"
		net start "${TARGET_VM_WEB_TIER_SERVICE_NAME}"
	 """
}


 //Load properties from envVariables map and set those as environment variables
def loadPropertiesAndSetAsEnvVariable(String platform) {

	platform =  platform.toLowerCase().trim()

	def variables = envVariables.get( "common" )
	for(variable in variables){
		String envVariableName = variable.key
		String envVariableValue = variable.value
		env."${envVariableName}" = "${envVariableValue}"
	}

	variables = envVariables.get( platform )
	for(variable in variables){
		String envVariableName = variable.key
		String envVariableValue = variable.value
		env."${envVariableName}" = "${envVariableValue}"
	}
}
